class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
    //check if only single element is present then return that element 
       if(nums.size()==1) return nums[0];
       //starting index
       int start=0;
       //last index
       int end=nums.size()-1;
       int mid=start+(end-start)/2;
       //checking if 0th index and its next is same or not
       if (nums[0]!= nums[1]){
        return nums[0];
       }
       //checking if last and second last index is same or not
        if (nums[end]!= nums[end- 1]){
         return nums[end];
        }
       while(start<=end){
        if (nums[mid] != nums[mid - 1] && nums[mid] != nums[mid + 1])
                return nums[mid];
        //if mid is at even index and (mid+1)odd is not equal
        //if mid is at odd index and (mid-1)even is not equal
        else if(mid % 2==0 && nums[mid] !=nums[mid+1] || mid % 2==1 && nums[mid] !=nums[mid-1]){
            //left part main aajao
            end=mid-1;
        }           
        else {
        //right part main aajao
            start=mid+1;
        }
        mid=start+(end-start)/2;
       }
  return nums[end];
        }
  
};
