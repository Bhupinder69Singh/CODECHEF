//BinarySearch
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int rows=matrix.size();
        int cols=matrix[0].size();
        int start=0;
        int end=(rows*cols)-1;
        int mid=start+(end-start)/2;
        while(start<=end){
           int element= matrix[mid/cols][mid % cols];
           //in a matrix if we divide any element by its no. of columns we get in which row its present(row index)
           //similarly to find column index we use mod operator the remainder will be column no.
           if(element == target){
               return 1;
           }
           if(element < target){
                start=mid+1;
           }
           else{
              end=mid-1;
           }
           mid=start+(end-start)/2;
        }
        return 0;
    }
};

//its time complexity is O(log m*n)
