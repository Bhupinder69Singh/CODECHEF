//approach is simple we start adding last digit of k to last digit of num  and generate carry
class Solution {
public:
    vector<int> addToArrayForm(vector<int>& num, int k) {
        vector<int> ans;
        int carry=0;
        int i=num.size()-1;
        //we are using while loop because it can check multiple conditions at single time
        while(k > 0 || i >= 0 || carry > 0){
            int sum=carry;//initially we have carry in sum
            if(k>0){
                sum=sum+(k%10);
                k=k/10;
            }
            if(i >= 0){
                sum=sum+num[i];//adding last digit of num
                i--;//decrementing pointer to last digit eg.if num=2143 and i=3(last digit) then i-- will point to(4)
            }
            carry=sum/10;
            ans.push_back(sum%10);
        }
    reverse(ans.begin(),ans.end());
    return ans;
    }
};


//-----------------------------------------------------------------------------------------------------------------------------------------
//OPTIMIZED
class Solution {
public:

    vector<int> addToArrayForm(vector<int>& num, int k) {
        int carry = 0;
        int i = num.size() - 1;//points to last digit of num
        while(i >= 0)//run until all digits are traversed
        {

         int sum = num[i] + (k % 10) + carry;
         k /= 10;

         num[i--] = sum % 10;
         carry = sum/10;

        }
        while(k > 0)//run until there are digits left in k
        {

         int sum = (k % 10) + carry;
         k /= 10;
    
         num.insert(num.begin(), sum%10);
         carry = sum/10;
       
        }
        if(carry > 0) num.insert(num.begin(), carry); 
        return num;
    }
};
