//unoptimised code
//here we take a element from first array and compare it with element with each element in second array if match is found we mark it 
/*
#include <bits/stdc++.h> 
vector<int> findArrayIntersection(vector<int> &arr1, int n, vector<int> &arr2, int m)
{
	// Write your code here.
    vector<int> ans;
    for(int i=0;i<arr1.size();i++){
        int term=arr1[i];
        for(int j=0;j<arr2.size();j++){
            if(term==arr2[j]){
               ans.push_back(term);
                arr2[j]=-1;
                break;
            }
        }
    }
    return ans;
}
*/

//optimised code here we are using only 1 loop so its time complexity is less
#include <bits/stdc++.h> 
vector<int> findArrayIntersection(vector<int> &arr1, int n, vector<int> &arr2, int m)
{
	// Write your code here.
    vector<int> ans;
    int i=0,j=0;//intialised two pointers
    while (i<n && j<m){
        if(arr1[i]==arr2[j]){
            ans.push_back(arr1[i]);
            i++;
            j++;
        }
        else if(arr1[i]<arr2[j]){
            i++;
        }
        else if(arr1[i]>arr2[j]){
            j++;
        }
    }
    return ans;
}
